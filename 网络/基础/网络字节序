网络字节序：
字节序: cpu从内存中对数据进行存取的顺序
主机字节序的分类:
大端字节序:低地址存高位
小端字节序:低地址存地位
int a = 0x01 02 03 04 00000001
01高位 04低位 
若有uchar *b = (uchar*) &a
大端时b[0] = 01 b[1] = 02... 
小端时b[0] = 04 b[1] = 03..

如何确定一个主机字节序是大端还是小端
typedef union{ int a;uchar b;}tmp;
tmp a;  
如果a.a = 1 则a.b == 1就是小端，因为联合体共用一块空间，b是a首地址则是低地址 
如果a.b = 0则是高地址，大端

决定一个主机字节序是大端还是小端的关键在于: cpu架构
X86-小端
MIPS-大端
主机字节序对网络通信的影响:不同主机字节序的两台主机进行通信的时候有可能会造成数据二义
比如  发送端是大端，int a = 0x01020304 ，传送
01020304一个一个发送，接收主机都是一个个从低地址存，如果是大端，也是一个个从低地址读取，没问题
接受主机是小端端，一样一个个从低地址存，但取的时候就读成04030201了
因此做出规定：在网络通信中统一使用大端字节序作为网络字节序进行通信

主机字节序会对哪些数据造成影响:
对按多字节存取的数据类型（超过一个字节）: short/int/long/float/doublechar
不会造成影响：如a[64]，本身数据就是一个一个字节的，本身就按单个字节来进行存储的
