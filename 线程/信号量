实现线程/进程间的同步与互斥
本质:计数器+等待队列+等待与唤醒的功能接口
信号量实现同步:通过自身的计数器进行资源计数,对临界资源访问之前先访问信号量,通过计数判断是否有资源台·够访问
若不能访问-计数<=0,则等待,并且计数-1
若可以访问-计数>0,则计数-1,直接访问;
其它线程促使条件满足后,则判断若计数>0,在计数+1,否则若计数<0,则唤醒一个等待队列上的线程,并计数+1
信号量实现互斥:只需要就将计数维持在0和1之间就可以实现互斥（互斥锁）
跟条件变量实现同步的区别：
信号量通过自身的计数判断实现同步，条件变量需要用进行条件判断；
并且因为条件变量靠外部用户进行判断，所以必须搭配互斥锁，而信号量是用自身内部进行原子操作，它不需要搭配互斥锁使用

int sem_init(sem_t *sem, int pshared, unsigned int value);
sem_t *sem: 信号量变量
pshared: 决定了当前的信号量用于进程间还是线程间, 0-线程间 / !0-进程间（进程间相互独立，不能用全局变量，使用共享内存）
value: 信号量的初值，初始计数

int sem_wait(sem_t*sem);  //阻塞，条件判断+等待的功能，如果不能访问就一直等待若计数<-0,则-1后阻塞，否则-1后立即返回
int sem_trywait(sem_t *sem);  //非阻塞，不能访问则报错返回
int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
int sem_post(sem_t *sem);  //唤醒信号量等待队列上的线程
int semdestroy(sem_t *sem): //销毁信号量


使用信号量实现一个线程安全的环形队列,模拟实现生产者与消费者模型

class RingQueue
{ 
std::vector<int>_queue;  //使用数组实现环形队列
int _capacity;   //初始化环形队列的节点数量
int step_read;  //当前读位置的数组下标
int step_write;  //当前写位置的数组下标
sem_t_sem_lock;  //用户实现互斥的锁
sem_t_sem_con;  //消费者等待队列,计数器对有数据的空间进行计数
sem_t_sem_pro;   //生产者等待队列,计数器对有空闲的空间进行计数
public:
RingQueue (int maxque =MAX-QUE):capacity(max que),queue (max-que), step-read(0), step-write(0)
{
//初始化信号量
sem init(& sem_lock, 0, 1);
sem init(& sem_con, 0, 0);
sem_init(& sem_pro, 0, max_que);
}
~RingQueue() 
{
//销毁信号量
sem_destroy(&_sem_lock);
sem_destroy(&_sem_con);
sem_destroy(&_sem_pro);
}

bool QueuePush(int &data)
{
//数据入队
//1,判断是否能够访问临界资源,判断空闲空间计数是否大于0
//锁是为了保护临界资源操作（_queue的资源操作）而不是信号量，所以先进行判断
//如果先加锁，再判断，如果判断无法访问和操作，就卡死了，会一直等待
sem_wait(& _sem_pro);
//2.加锁
sem_wait(& _sem_lock);
//3,数据的入队操作
_queue[_step_write] = data;
_step_write = (_step_write +1) %_capacity;
//4,数据资源的空间计数+1,唤醒消费者
sem_post(&_sem_con);
//5.解锁
sem_post(&_sem_lock);
return true;
}
bool QueuePop(init &data)
{
sem_wait(& sem_con); 
sem_wait(& sem_lock);
//此时能访问了
data =_queue[_step_read];
_step_read = (step read + 1) %_capacity;
sem_post(& sem_pro);
sem_post(& sem_lock);
return true;
}
}
